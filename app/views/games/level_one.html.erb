 

<script type="text/javascript">

// these are for creating a user id that we can save in the data base via .ajax
var userId = <%= current_user.id %>;
localStorage.setItem("userId", userId);

// for timer
var pauser = true;

var game = new Phaser.Game(860, 600, Phaser.AUTO, 'game-container', { preload: preload, create: create, update: update, render: render });


var coins, clouds, cloud, player;



function preload() {
  localStorage.clear();
  // this is for the clock
  beginningTimeSeconds = game.time.time / 1000;
  beginningTimeMS = game.time.time;
  console.log(beginningTimeMS);

	game.load.image('background', '/images/Bedroom_1.jpg');
	game.load.image('blank_line', '/images/blank_line.png');
	game.load.image('purp_line', '/images/purp_line.png');
    // game.load.spritesheet('user', '/images/hotdogsprite.png', 49, 100);
  game.load.spritesheet('user', '/images/runninmoney.png', 250, 320, 60);
  game.load.spritesheet('coin', '/images/redgacoin.png', 273.29, 300);
  game.load.spritesheet('cloud', '/images/cloudsprite.png', 500, 275, 13);
}

// these create the timer variables
var timer;
var timer2;
var total = 50;
var total_minutes = 8;
var total_seconds = 0;


function create() {
	game.physics.startSystem(Phaser.Physics.ARCADE);
	game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
  game.input.onDown.add(gofull, this);

    
	
	// inserting background image
	background = game.add.image(0, 0, 'background');
	background.height = game.height;
  background.width = game.width;
    
    // this is for the line that makes the window allow you to jump out of it to the next level
    exit_window = game.add.sprite(100, 100, 'purp_line');
    exit_window.scale.setTo(2, 1);
    game.physics.arcade.enable(exit_window);
    exit_window.body.angle += 5;
    // game.add.tween(exit_window).to( { angle: 90 }, 1, Phaser.Easing.Linear.None, true);

    
    

    // creating platform group to contain the floor
    platforms = game.add.group();
    //  We will enable physics for any object that is created in this group
  	platforms.enableBody = true;
  	
    // creating the floor for the game
   var ground = platforms.create(0, game.world.height -30, 'blank_line');
   game.physics.arcade.enable(ground);
   ground.scale.setTo(200, 2);
   ground.body.immovable = true;

// this is the ledge at the top left dresser with coin on it
    ledge_1 = platforms.create(172, 153, 'blank_line');
    ledge_1.scale.setTo(2.5, 1);
    ledge_1.body.immovable = true;
    // ledge_1.collideDown = true;
    

    // this is the ledge for the bed
   	ledge_2 = platforms.create(425, 400, 'blank_line');
   	ledge_2.scale.setTo(3.5, 1);
    ledge_2.body.immovable = true;

	// this is the ledge for the top of the desk
    ledge_3 = platforms.create(140, 365, 'blank_line');
   	ledge_3.scale.setTo(2.5, 1);
    ledge_3.body.immovable = true;

    // this is the ledge for the top of the books
    ledge_4 = platforms.create(150, 320, 'blank_line');
   	ledge_4.scale.setTo(.5, 1);
    ledge_4.body.immovable = true;


    // this is the ledge for the top of the chair only way to get up
    ledge_5 = platforms.create(250, 440, 'blank_line');
   	ledge_5.scale.setTo(.45, 1);
    ledge_5.body.immovable = true;



   
   // bring character into the game
   	player = game.add.sprite(1, 220, 'user');
	 //  We need to enable physics on the player
	    game.physics.arcade.enable(player);
      player.scale.setTo(0.6,0.6);
      player.body.setSize(45, 165, 65, 90);
    	player.body.gravity.y = 500;
    	player.body.checkCollision.up = false;
    	player.body.checkCollision.left = false;
    	player.body.checkCollision.right = false;
		 //  Player physics properties. Give the little guy a slight bounce.
	    player.body.bounce.y= 0.2;
	    player.body.gravity.y = 375;
	    player.body.collideWorldBounds = true;
	 
	    //  Our two animations, walking left and right.
	    player.animations.add('left',[3,4,5,6,7,8,9,10], 9, true);
	    player.animations.add('right',[58,57,56,55,54,53,52,51,50], 9, true);
	    // player.animations.add('jumpLeft', [14], 3, true);
	    // player.animations.add('jumpRight', [26], 3, true);

        // this is where player movement starts 
        cursors = game.input.keyboard.createCursorKeys();
        spaceBar = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);



   //  Create our Timer
  timer = game.time.create(false);
  timer2 = game.time.create(false);
  //  Set a TimerEvent to occur after 2 seconds
    // if the seconds is game.time.time then this updates every 1 second real time (which is 1 second real time  = 1000 on phaser for some reason). So we want our game to be 2 minutes long real time. so 
    
    // 1000 = update every second
    // 1000 * 60  = 60,000(update once a minute (real time)
    // 60,000 * 2 = 120,000(update every two minutes)
   
    // how many minutes are in 2 min
    // 120 seconds = 2 minutes
    // 120 seconds / 10 = 12 seconds per minute game time
    // 12 * 1000 = 12,000 (makes clock time increase one minute every 12 seconds!!!!)

    // so now every 12 seconds(one minute game time) , this loop saves time on the clock
  // timer.loop(12000, updateCounter, this);
  // this is the look that updates the game time seconds.
  // in game time, one second = 200
  timer.loop(200, updateCounter_2, this);

  //  Start the timer running - this is important!
  //  It won't start automatically, allowing you to hook it to button events and the like.
  timer.start();
  timer2.start();

   gameTime = ('TIME: ' + total_minutes + ":" + total + ":" + total_seconds +' a.m.');


// clouds = game.add.group();

// clouds.enableBody = true;
//         var cloud = clouds.create(i * 100,200, 'cloud');
//         // cloud.scale.x = game.rnd.realInRange(.24, .24);
//         // cloud.scale.y = game.rnd.realInRange(.24, .24);
        
//         cloud.animations.add('cloud',[1,2,3,4,5,6,7,8,9,10,11,12], 7 , true);
//         cloud.animations.play('cloud');


// coins = game.add.group();

  //   coins.enableBody = true;

  //   //  Here we'll create 12 of them evenly spaced apart
  //   for (var i = 1.8; i < 4.5; i++)
  //   {
  //       //  Create a star inside of the 'stars' group
  //       var coin = coins.create(i * 90, 0, 'coin');
  //       coin.scale.x = game.rnd.realInRange(.24, .24);
		// coin.scale.y = game.rnd.realInRange(.24, .24);

  //       //  Let gravity do its thing
  //       coin.body.gravity.y = 300;
  //       //  This just gives each star a slightly random bounce value
  //       coin.body.bounce.y = 0.6 + Math.random() * 0.4;

  //       coin.animations.add('spin', [5, 6, 7, 8, 9, 10, 9], 10, true);
  //       coin.animations.play('spin');
  //   }

        
        
	   
    	
}





function update() {

	// for could movement
    
	
    //  Reset the players velocity (movement)
   	player.body.velocity.x = 0;

    if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -250;

        player.animations.play('left');
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x = 250;

        player.animations.play('right');
    }
    else
    {
        //  Stand still
        player.animations.stop();

        player.frame = 24;
    }

    //  Allow the player to jump if they are touching the ground.
    if (spaceBar.isDown && player.body.touching.down)
    {
        player.body.velocity.y = -350;
    }


    // coin animation
	
	game.physics.arcade.collide(coins, platforms);
    game.physics.arcade.collide(player, platforms);


	// allows player to collect coins
	game.physics.arcade.overlap(player, coins, collectCoin, null, this);
	// scoreText = game.add.text(16, 16, 'Score: ', { fontSize: '32px', fill: '#000' });



    // this allows the player to overlap with the window and allow you to jump out of it when you hit it.
       game.physics.arcade.overlap(player, exit_window, overlapHandler, null, this);
	


}


// this function makes the screen go fullscreen when you call it
function gofull() {

    if (game.scale.isFullScreen)
    {
        game.scale.stopFullScreen();
    }
    else
    {
        game.scale.startFullScreen(false);
    }

}


var score = 0;


function collectCoin (player, coin) {
	
    // Removes the star from the screen
    coin.kill();
    

    
    score += 10;
    // scoreText.text = 'Score: ' + score;
   

}
// this is the function that updates the clock and keeps track
function updateCounter_2() {
   
   if (total_seconds > 59) 
    {
        total_seconds = total_seconds - 60;
        total ++;
          
          if (total > 59) 
            {
            total = total - 60;
            total_minutes++;
            }
          else {

          }
    }
    else    
    {
        total_seconds++;
    }
    // this updates the clock
    gameTime.text = 'TIME: ' + total_minutes + ":" + total + ":" + total_seconds +' a.m.';
}



function render() {
    // this is to display the clock
    game.debug.text('TIME: ' + total_minutes + ":" + total + ":" + total_seconds +' a.m.', 358, 25);
    // this allows player to be followed by camera
    // game.debug.cameraInfo(game.camera, 0, 0);
    game.debug.body(player);
    game.debug.body(exit_window);
    
}

// this is the actually function being called when you jump out the window. this bring you to the next level
function overlapHandler (player, exit_window) {

    game.stage.backgroundColor = '#992d2d';
// this makes player disappear when they change levels
    player.kill();

   

            
      // this changes level
    var levelChange = function() {
        // this kills timer after you win
        timer.stop();
        timer2.stop();
        // this is what saves the time to local storage
        finishTime = total;
        localStorage.setItem("firstLevelTime", finishTime);

        finishTime_minutes = total_minutes;
        localStorage.setItem("firstLevelTime_minutes", finishTime_minutes);

        finishTime_seconds = total_seconds;
        localStorage.setItem("firstLevelTime_seconds", finishTime_seconds);

        localStorage.setItem("firstLevelClock", gameTime);
        // insert timeout function
        // window.location.replace("http://reincarnage.herokuapp.com/level2intro")};
        window.location.replace("http://localhost:3000/games/level_two")};
        
        $('body').fadeOut(2000, function(){levelChange();});

}
   
</script>



